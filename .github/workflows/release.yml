name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  FORCE_COLOR: 0
  NO_COLOR: 1

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run full test suite
      run: |
        echo "::group::Full Test Suite"
        uv run pytest --tb=short
        echo "::endgroup::"

    - name: Lint and format check
      run: |
        echo "::group::Code Quality Check"
        uv run ruff format --check .
        uv run ruff check .
        echo "::endgroup::"

    - name: Type check
      run: |
        echo "::group::Type Check"
        uv run pyright
        echo "::endgroup::"

    - name: Build package
      run: |
        echo "::group::Build Package"
        uv build
        echo "::endgroup::"

    - name: Test package installation
      run: |
        echo "::group::Test Installation"
        # Install the built package
        uv pip install dist/*.whl
        
        # Test basic functionality
        vtt2minutes --help
        vtt2minutes info tests/sample.vtt
        echo "::endgroup::"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Build package
      run: uv build

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create release notes
      id: release_notes
      run: |
        # Extract latest changes from CHANGELOG if it exists, otherwise use git log
        if [ -f "CHANGELOG.md" ]; then
          # Extract section for this version from CHANGELOG
          awk '/^## \['"${{ steps.version.outputs.version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        else
          # Generate release notes from recent commits
          echo "## Changes in ${{ steps.version.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
        fi
        
        # Ensure we have some content
        if [ ! -s release_notes.md ]; then
          echo "## Release ${{ steps.version.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          echo "See the full changelog for details." >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Build package
      run: uv build

    - name: Check package
      run: |
        echo "::group::Package Check"
        uv run twine check dist/*
        echo "::endgroup::"

    - name: Publish to PyPI
      run: |
        echo "::group::PyPI Publication"
        uv run twine upload dist/*
        echo "::endgroup::"
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Update version for test release
      run: |
        # Add timestamp to version for test releases
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        VERSION="${{ github.event.inputs.version }}.dev${TIMESTAMP}"
        sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
        echo "Test version: ${VERSION}"

    - name: Build package
      run: uv build

    - name: Publish to Test PyPI
      run: |
        echo "::group::Test PyPI Publication"
        uv run twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        echo "::endgroup::"
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}