# git-cliff の設定ファイル
# 詳細: https://git-cliff.org/docs/configuration

[changelog]
# 変更履歴のヘッダーテンプレート
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# メインの変更履歴本文テンプレート
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }}\
            {% if commit.github.pr_number %} ([#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }})){% endif %}\
            {% if commit.breaking %} **BREAKING**{% endif %}
    {% endfor %}
{% endfor %}\n
"""
# 個別リリースのテンプレート
# 各リリース（バージョンタグ）ごとにレンダリングされる
# bodyと同様だが、個別リリース用
# デフォルト動作を使用するため空のまま
template = """
"""
# フッターテンプレート
footer = """
"""
# 変更履歴エントリの前後の空白を削除
trim = true
# 変更履歴生成後に適用する後処理
postprocessors = []

[git]
# Conventional Commits 仕様に基づいてコミットを解析
conventional_commits = true
# Conventional Commit形式に一致しないコミットを除外
filter_unconventional = false
# 改行でコミットを分割
split_commits = false
# 破壊的変更がスキップされないように保護
protect_breaking_commits = true
# コミットパスでフィルタリング
# commit_preprocessors = []
# メッセージパターンでコミットをフィルタリング
# filter_commits = false
# フィルタリングするタグパターン
tag_pattern = "v[0-9]*"
# このパターンに一致するタグをスキップ
skip_tags = ""
# このパターンに一致するタグを無視
ignore_tags = ""
# タグを日付順にソート
topo_order = false
# コミットを最新順にソート
sort_commits = "newest"
# コミットメッセージからリンクを抽出するパーサー
link_parsers = [
    { pattern = "#(\\d+)", href = "https://github.com/kiririmode/vtt2minutes/issues/$1" },
    { pattern = "RFC(\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1" },
]

# コミットをグループ化するためのパーサー
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^docs", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactoring" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore", group = "Miscellaneous" },
    { message = "^ci", group = "CI/CD" },
    { message = "^build", group = "Build" },
    { message = "^revert", group = "Reverts" },
    { body = ".*security", group = "Security" },
    { message = "^Merge", skip = true },
]

[remote.github]
owner = "kiririmode"
repo = "vtt2minutes"
