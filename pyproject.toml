[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "vtt2minutes"
version = "1.0.0"
description = "Convert Microsoft Teams VTT transcripts to structured meeting minutes"
readme = "README.md"
license = "MIT"
authors = [
    { name = "VTT2Minutes Contributors" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Text Processing :: Linguistic",
]
keywords = ["vtt", "transcript", "meeting", "minutes", "teams"]
requires-python = ">=3.12"
dependencies = [
    "boto3>=1.38.46",
    "click>=8.0.0",
    "rich>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "pip-audit>=2.6.0",
    "pyinstaller>=6.0.0",
]

[project.scripts]
vtt2minutes = "vtt2minutes.cli:main"

[project.urls]
Homepage = "https://github.com/kiririmode/vtt2minutes"
Repository = "https://github.com/kiririmode/vtt2minutes"
Issues = "https://github.com/kiririmode/vtt2minutes/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/vtt2minutes"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "RUF001",  # Allow ambiguous unicode characters (needed for Japanese support)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B018"]  # Allow useless expressions in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/__pycache__"]
pythonVersion = "3.12"
pythonPlatform = "All"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
reportPrivateUsage = "none"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportDuplicateImport = "error"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownParameterType = "none"
reportMissingParameterType = "none"

# Per-file type checking rules
executionEnvironments = [
  { root = "tests", reportPrivateUsage = "none", reportUnknownMemberType = "none", reportUnknownArgumentType = "none", reportUnknownParameterType = "none", reportMissingParameterType = "none", reportArgumentType = "none" }
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/vtt2minutes",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src/vtt2minutes"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*", 
    "*/.venv/*",
    "*/site-packages/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[dependency-groups]
dev = [
    "lizard>=1.17.31",
    "textdistance>=4.6.3",
]
